//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TryIt_ElectiveServices.MyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordFilter", ReplyAction="http://tempuri.org/IService1/WordFilterResponse")]
        string WordFilter(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordFilter", ReplyAction="http://tempuri.org/IService1/WordFilterResponse")]
        System.Threading.Tasks.Task<string> WordFilterAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Stemming", ReplyAction="http://tempuri.org/IService1/StemmingResponse")]
        string Stemming(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Stemming", ReplyAction="http://tempuri.org/IService1/StemmingResponse")]
        System.Threading.Tasks.Task<string> StemmingAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/String_Sort", ReplyAction="http://tempuri.org/IService1/String_SortResponse")]
        string String_Sort(string s, int sortingMethod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/String_Sort", ReplyAction="http://tempuri.org/IService1/String_SortResponse")]
        System.Threading.Tasks.Task<string> String_SortAsync(string s, int sortingMethod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CharacterCounter", ReplyAction="http://tempuri.org/IService1/CharacterCounterResponse")]
        int CharacterCounter(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CharacterCounter", ReplyAction="http://tempuri.org/IService1/CharacterCounterResponse")]
        System.Threading.Tasks.Task<int> CharacterCounterAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Password", ReplyAction="http://tempuri.org/IService1/PasswordResponse")]
        bool Password(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Password", ReplyAction="http://tempuri.org/IService1/PasswordResponse")]
        System.Threading.Tasks.Task<bool> PasswordAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Upper_Lower_DoubleSpace", ReplyAction="http://tempuri.org/IService1/Upper_Lower_DoubleSpaceResponse")]
        string Upper_Lower_DoubleSpace(string s, int action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Upper_Lower_DoubleSpace", ReplyAction="http://tempuri.org/IService1/Upper_Lower_DoubleSpaceResponse")]
        System.Threading.Tasks.Task<string> Upper_Lower_DoubleSpaceAsync(string s, int action);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TryIt_ElectiveServices.MyService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TryIt_ElectiveServices.MyService.IService1>, TryIt_ElectiveServices.MyService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string WordFilter(string s) {
            return base.Channel.WordFilter(s);
        }
        
        public System.Threading.Tasks.Task<string> WordFilterAsync(string s) {
            return base.Channel.WordFilterAsync(s);
        }
        
        public string Stemming(string s) {
            return base.Channel.Stemming(s);
        }
        
        public System.Threading.Tasks.Task<string> StemmingAsync(string s) {
            return base.Channel.StemmingAsync(s);
        }
        
        public string String_Sort(string s, int sortingMethod) {
            return base.Channel.String_Sort(s, sortingMethod);
        }
        
        public System.Threading.Tasks.Task<string> String_SortAsync(string s, int sortingMethod) {
            return base.Channel.String_SortAsync(s, sortingMethod);
        }
        
        public int CharacterCounter(string s) {
            return base.Channel.CharacterCounter(s);
        }
        
        public System.Threading.Tasks.Task<int> CharacterCounterAsync(string s) {
            return base.Channel.CharacterCounterAsync(s);
        }
        
        public bool Password(string s) {
            return base.Channel.Password(s);
        }
        
        public System.Threading.Tasks.Task<bool> PasswordAsync(string s) {
            return base.Channel.PasswordAsync(s);
        }
        
        public string Upper_Lower_DoubleSpace(string s, int action) {
            return base.Channel.Upper_Lower_DoubleSpace(s, action);
        }
        
        public System.Threading.Tasks.Task<string> Upper_Lower_DoubleSpaceAsync(string s, int action) {
            return base.Channel.Upper_Lower_DoubleSpaceAsync(s, action);
        }
    }
}
